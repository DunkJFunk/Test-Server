name: CrossGPT QA Analysis
run-name: ${{ github.actor }} is testing with CrossGPT
on: [push]
jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code and clone to runner.
        uses: actions/checkout@v4
      - name: Creating virtual environment and installing dependenies.
        run: |
          echo "python -m venv .venv"
          echo "source .venv/bin/activate"
          echo "python -m pip install -r requirements.txt"
      - name: Booting FastAPI server.
        run: |
          echo "fastapi run"
      - name: Initialize Access Keys
        run: |
          eval `ssh-agent -s`
          echo "ssh-add - <<< '${{ secrets.GITHUBACTIONSTWO }}'"
  testing:
    needs: setup # Dependant on the setup job function
    runs-on: ubuntu-latest
    steps:
      - name: Grabbing CrossGPT code.
        uses: actions/checkout@master
        with:
          repository: DunkJFunk/CrossGPT
          ref: refs/heads/main
      - name: List GPT files.
        working-directory: ./CrossGPT
        run: |
          ls -a ${{ github.workspace }}
      - name: Creating virtual environment and installing dependenies.
        working-directory: ./CrossGPT
        run: |
          echo "python -m venv .venv"
          echo "source .venv/bin/activate"
          echo "python -m pip install -r requirements.txt"
      
# Setup Instance
#   - Check out repository code
#   - Make sure the repository is able to receive calls from the runner
#     - Creating and activating .venv file
#     - Running 'fastapi run' inside of the container through bash or zsh
#   - Access the necessary files inside of the repository (.html)
# Running Tests
#   - Be able to access CrossGPT (a.k.a. a seperate public repository)
#   - Call the main.py function with our desired variables (FILE1 and FILE2)